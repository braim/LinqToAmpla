//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4927.
// 
#pragma warning disable 1591

namespace SE.MESCC.DAL.WebReferences.LegacyGeneralWS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using SE.MESCC.Settings;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'class' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceBinding", Namespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server/Citect.Ampla" +
        ".General.Server%2C%20Version%3D4.2.4629.0%2C%20Culture%3Dneutral%2C%20PublicKeyT" +
        "oken%3D13aaee2494f61799")]
    public partial class WebServiceBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AboutOperationCompleted;
        
        private System.Threading.SendOrPostCallback AvailableModulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuditLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCauseLocationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetData1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetData2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldDescriptorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldDescriptors1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilterDescriptorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilterDescriptors1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHierarchyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHierarchy1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMatrixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmptyDataRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVariablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback Login1OperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenewLeaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitDataRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitNewDataRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVariablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVariables1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebServiceBinding() {
            this.Url = AmplaSettings.generalLegacyWS_WebServiceService_LOCALHOST;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AboutCompletedEventHandler AboutCompleted;
        
        /// <remarks/>
        public event AvailableModulesCompletedEventHandler AvailableModulesCompleted;
        
        /// <remarks/>
        public event GetAuditLogCompletedEventHandler GetAuditLogCompleted;
        
        /// <remarks/>
        public event GetCalendarCompletedEventHandler GetCalendarCompleted;
        
        /// <remarks/>
        public event GetCauseLocationsCompletedEventHandler GetCauseLocationsCompleted;
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event GetData1CompletedEventHandler GetData1Completed;
        
        /// <remarks/>
        public event GetData2CompletedEventHandler GetData2Completed;
        
        /// <remarks/>
        public event GetDataRecordCompletedEventHandler GetDataRecordCompleted;
        
        /// <remarks/>
        public event GetFieldDescriptorsCompletedEventHandler GetFieldDescriptorsCompleted;
        
        /// <remarks/>
        public event GetFieldDescriptors1CompletedEventHandler GetFieldDescriptors1Completed;
        
        /// <remarks/>
        public event GetFilterCompletedEventHandler GetFilterCompleted;
        
        /// <remarks/>
        public event GetFilterDescriptorsCompletedEventHandler GetFilterDescriptorsCompleted;
        
        /// <remarks/>
        public event GetFilterDescriptors1CompletedEventHandler GetFilterDescriptors1Completed;
        
        /// <remarks/>
        public event GetHierarchyCompletedEventHandler GetHierarchyCompleted;
        
        /// <remarks/>
        public event GetHierarchy1CompletedEventHandler GetHierarchy1Completed;
        
        /// <remarks/>
        public event GetMatrixCompletedEventHandler GetMatrixCompleted;
        
        /// <remarks/>
        public event GetEmptyDataRecordCompletedEventHandler GetEmptyDataRecordCompleted;
        
        /// <remarks/>
        public event GetVariablesCompletedEventHandler GetVariablesCompleted;
        
        /// <remarks/>
        public event GetViewsCompletedEventHandler GetViewsCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event Login1CompletedEventHandler Login1Completed;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event CheckPasswordCompletedEventHandler CheckPasswordCompleted;
        
        /// <remarks/>
        public event RenewLeaseCompletedEventHandler RenewLeaseCompleted;
        
        /// <remarks/>
        public event SubmitCalendarCompletedEventHandler SubmitCalendarCompleted;
        
        /// <remarks/>
        public event SubmitDataRecordCompletedEventHandler SubmitDataRecordCompleted;
        
        /// <remarks/>
        public event SubmitNewDataRecordCompletedEventHandler SubmitNewDataRecordCompleted;
        
        /// <remarks/>
        public event UpdateVariablesCompletedEventHandler UpdateVariablesCompleted;
        
        /// <remarks/>
        public event UpdateVariables1CompletedEventHandler UpdateVariables1Completed;
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#About", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string About() {
            object[] results = this.Invoke("About", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AboutAsync() {
            this.AboutAsync(null);
        }
        
        /// <remarks/>
        public void AboutAsync(object userState) {
            if ((this.AboutOperationCompleted == null)) {
                this.AboutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAboutOperationCompleted);
            }
            this.InvokeAsync("About", new object[0], this.AboutOperationCompleted, userState);
        }
        
        private void OnAboutOperationCompleted(object arg) {
            if ((this.AboutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AboutCompleted(this, new AboutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#AvailableModules", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string AvailableModules() {
            object[] results = this.Invoke("AvailableModules", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AvailableModulesAsync() {
            this.AvailableModulesAsync(null);
        }
        
        /// <remarks/>
        public void AvailableModulesAsync(object userState) {
            if ((this.AvailableModulesOperationCompleted == null)) {
                this.AvailableModulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAvailableModulesOperationCompleted);
            }
            this.InvokeAsync("AvailableModules", new object[0], this.AvailableModulesOperationCompleted, userState);
        }
        
        private void OnAvailableModulesOperationCompleted(object arg) {
            if ((this.AvailableModulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AvailableModulesCompleted(this, new AvailableModulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetAuditLog", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetAuditLog(string guid, string filterXml) {
            object[] results = this.Invoke("GetAuditLog", new object[] {
                        guid,
                        filterXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuditLogAsync(string guid, string filterXml) {
            this.GetAuditLogAsync(guid, filterXml, null);
        }
        
        /// <remarks/>
        public void GetAuditLogAsync(string guid, string filterXml, object userState) {
            if ((this.GetAuditLogOperationCompleted == null)) {
                this.GetAuditLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuditLogOperationCompleted);
            }
            this.InvokeAsync("GetAuditLog", new object[] {
                        guid,
                        filterXml}, this.GetAuditLogOperationCompleted, userState);
        }
        
        private void OnGetAuditLogOperationCompleted(object arg) {
            if ((this.GetAuditLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuditLogCompleted(this, new GetAuditLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetCalendar", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetCalendar(string guid, string filterXml) {
            object[] results = this.Invoke("GetCalendar", new object[] {
                        guid,
                        filterXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCalendarAsync(string guid, string filterXml) {
            this.GetCalendarAsync(guid, filterXml, null);
        }
        
        /// <remarks/>
        public void GetCalendarAsync(string guid, string filterXml, object userState) {
            if ((this.GetCalendarOperationCompleted == null)) {
                this.GetCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCalendarOperationCompleted);
            }
            this.InvokeAsync("GetCalendar", new object[] {
                        guid,
                        filterXml}, this.GetCalendarOperationCompleted, userState);
        }
        
        private void OnGetCalendarOperationCompleted(object arg) {
            if ((this.GetCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCalendarCompleted(this, new GetCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetCauseLocations", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetCauseLocations(string guid, string reportingPointPath) {
            object[] results = this.Invoke("GetCauseLocations", new object[] {
                        guid,
                        reportingPointPath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCauseLocationsAsync(string guid, string reportingPointPath) {
            this.GetCauseLocationsAsync(guid, reportingPointPath, null);
        }
        
        /// <remarks/>
        public void GetCauseLocationsAsync(string guid, string reportingPointPath, object userState) {
            if ((this.GetCauseLocationsOperationCompleted == null)) {
                this.GetCauseLocationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCauseLocationsOperationCompleted);
            }
            this.InvokeAsync("GetCauseLocations", new object[] {
                        guid,
                        reportingPointPath}, this.GetCauseLocationsOperationCompleted, userState);
        }
        
        private void OnGetCauseLocationsOperationCompleted(object arg) {
            if ((this.GetCauseLocationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCauseLocationsCompleted(this, new GetCauseLocationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetData", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetData(string guid, string module, string view, string filterXml) {
            object[] results = this.Invoke("GetData", new object[] {
                        guid,
                        module,
                        view,
                        filterXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(string guid, string module, string view, string filterXml) {
            this.GetDataAsync(guid, module, view, filterXml, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(string guid, string module, string view, string filterXml, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        guid,
                        module,
                        view,
                        filterXml}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetData1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetData", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetData(string guid, string module, string view, string filterXml, string[] fieldNames) {
            object[] results = this.Invoke("GetData1", new object[] {
                        guid,
                        module,
                        view,
                        filterXml,
                        fieldNames});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetData1Async(string guid, string module, string view, string filterXml, string[] fieldNames) {
            this.GetData1Async(guid, module, view, filterXml, fieldNames, null);
        }
        
        /// <remarks/>
        public void GetData1Async(string guid, string module, string view, string filterXml, string[] fieldNames, object userState) {
            if ((this.GetData1OperationCompleted == null)) {
                this.GetData1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetData1OperationCompleted);
            }
            this.InvokeAsync("GetData1", new object[] {
                        guid,
                        module,
                        view,
                        filterXml,
                        fieldNames}, this.GetData1OperationCompleted, userState);
        }
        
        private void OnGetData1OperationCompleted(object arg) {
            if ((this.GetData1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetData1Completed(this, new GetData1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetData2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetData", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetData(string guid) {
            object[] results = this.Invoke("GetData2", new object[] {
                        guid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetData2Async(string guid) {
            this.GetData2Async(guid, null);
        }
        
        /// <remarks/>
        public void GetData2Async(string guid, object userState) {
            if ((this.GetData2OperationCompleted == null)) {
                this.GetData2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetData2OperationCompleted);
            }
            this.InvokeAsync("GetData2", new object[] {
                        guid}, this.GetData2OperationCompleted, userState);
        }
        
        private void OnGetData2OperationCompleted(object arg) {
            if ((this.GetData2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetData2Completed(this, new GetData2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetDataRecord", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetDataRecord(string guid, string module, string view, string filterXml) {
            object[] results = this.Invoke("GetDataRecord", new object[] {
                        guid,
                        module,
                        view,
                        filterXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataRecordAsync(string guid, string module, string view, string filterXml) {
            this.GetDataRecordAsync(guid, module, view, filterXml, null);
        }
        
        /// <remarks/>
        public void GetDataRecordAsync(string guid, string module, string view, string filterXml, object userState) {
            if ((this.GetDataRecordOperationCompleted == null)) {
                this.GetDataRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataRecordOperationCompleted);
            }
            this.InvokeAsync("GetDataRecord", new object[] {
                        guid,
                        module,
                        view,
                        filterXml}, this.GetDataRecordOperationCompleted, userState);
        }
        
        private void OnGetDataRecordOperationCompleted(object arg) {
            if ((this.GetDataRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataRecordCompleted(this, new GetDataRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetFieldDescriptors", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetFieldDescriptors(string guid) {
            object[] results = this.Invoke("GetFieldDescriptors", new object[] {
                        guid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldDescriptorsAsync(string guid) {
            this.GetFieldDescriptorsAsync(guid, null);
        }
        
        /// <remarks/>
        public void GetFieldDescriptorsAsync(string guid, object userState) {
            if ((this.GetFieldDescriptorsOperationCompleted == null)) {
                this.GetFieldDescriptorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldDescriptorsOperationCompleted);
            }
            this.InvokeAsync("GetFieldDescriptors", new object[] {
                        guid}, this.GetFieldDescriptorsOperationCompleted, userState);
        }
        
        private void OnGetFieldDescriptorsOperationCompleted(object arg) {
            if ((this.GetFieldDescriptorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldDescriptorsCompleted(this, new GetFieldDescriptorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetFieldDescriptors1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetFieldDescriptors", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetFieldDescriptors(string guid, string path, string module, string view) {
            object[] results = this.Invoke("GetFieldDescriptors1", new object[] {
                        guid,
                        path,
                        module,
                        view});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldDescriptors1Async(string guid, string path, string module, string view) {
            this.GetFieldDescriptors1Async(guid, path, module, view, null);
        }
        
        /// <remarks/>
        public void GetFieldDescriptors1Async(string guid, string path, string module, string view, object userState) {
            if ((this.GetFieldDescriptors1OperationCompleted == null)) {
                this.GetFieldDescriptors1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldDescriptors1OperationCompleted);
            }
            this.InvokeAsync("GetFieldDescriptors1", new object[] {
                        guid,
                        path,
                        module,
                        view}, this.GetFieldDescriptors1OperationCompleted, userState);
        }
        
        private void OnGetFieldDescriptors1OperationCompleted(object arg) {
            if ((this.GetFieldDescriptors1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldDescriptors1Completed(this, new GetFieldDescriptors1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetFilter", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetFilter(string guid) {
            object[] results = this.Invoke("GetFilter", new object[] {
                        guid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFilterAsync(string guid) {
            this.GetFilterAsync(guid, null);
        }
        
        /// <remarks/>
        public void GetFilterAsync(string guid, object userState) {
            if ((this.GetFilterOperationCompleted == null)) {
                this.GetFilterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilterOperationCompleted);
            }
            this.InvokeAsync("GetFilter", new object[] {
                        guid}, this.GetFilterOperationCompleted, userState);
        }
        
        private void OnGetFilterOperationCompleted(object arg) {
            if ((this.GetFilterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilterCompleted(this, new GetFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetFilterDescriptors", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetFilterDescriptors(string guid) {
            object[] results = this.Invoke("GetFilterDescriptors", new object[] {
                        guid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFilterDescriptorsAsync(string guid) {
            this.GetFilterDescriptorsAsync(guid, null);
        }
        
        /// <remarks/>
        public void GetFilterDescriptorsAsync(string guid, object userState) {
            if ((this.GetFilterDescriptorsOperationCompleted == null)) {
                this.GetFilterDescriptorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilterDescriptorsOperationCompleted);
            }
            this.InvokeAsync("GetFilterDescriptors", new object[] {
                        guid}, this.GetFilterDescriptorsOperationCompleted, userState);
        }
        
        private void OnGetFilterDescriptorsOperationCompleted(object arg) {
            if ((this.GetFilterDescriptorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilterDescriptorsCompleted(this, new GetFilterDescriptorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetFilterDescriptors1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetFilterDescriptors", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetFilterDescriptors(string guid, string path, string module, string view) {
            object[] results = this.Invoke("GetFilterDescriptors1", new object[] {
                        guid,
                        path,
                        module,
                        view});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFilterDescriptors1Async(string guid, string path, string module, string view) {
            this.GetFilterDescriptors1Async(guid, path, module, view, null);
        }
        
        /// <remarks/>
        public void GetFilterDescriptors1Async(string guid, string path, string module, string view, object userState) {
            if ((this.GetFilterDescriptors1OperationCompleted == null)) {
                this.GetFilterDescriptors1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilterDescriptors1OperationCompleted);
            }
            this.InvokeAsync("GetFilterDescriptors1", new object[] {
                        guid,
                        path,
                        module,
                        view}, this.GetFilterDescriptors1OperationCompleted, userState);
        }
        
        private void OnGetFilterDescriptors1OperationCompleted(object arg) {
            if ((this.GetFilterDescriptors1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilterDescriptors1Completed(this, new GetFilterDescriptors1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetHierarchy", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetHierarchy(string guid) {
            object[] results = this.Invoke("GetHierarchy", new object[] {
                        guid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHierarchyAsync(string guid) {
            this.GetHierarchyAsync(guid, null);
        }
        
        /// <remarks/>
        public void GetHierarchyAsync(string guid, object userState) {
            if ((this.GetHierarchyOperationCompleted == null)) {
                this.GetHierarchyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHierarchyOperationCompleted);
            }
            this.InvokeAsync("GetHierarchy", new object[] {
                        guid}, this.GetHierarchyOperationCompleted, userState);
        }
        
        private void OnGetHierarchyOperationCompleted(object arg) {
            if ((this.GetHierarchyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHierarchyCompleted(this, new GetHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetHierarchy1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetHierarchy", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetHierarchy(string sessionToken, string context, string mode, string module) {
            object[] results = this.Invoke("GetHierarchy1", new object[] {
                        sessionToken,
                        context,
                        mode,
                        module});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHierarchy1Async(string sessionToken, string context, string mode, string module) {
            this.GetHierarchy1Async(sessionToken, context, mode, module, null);
        }
        
        /// <remarks/>
        public void GetHierarchy1Async(string sessionToken, string context, string mode, string module, object userState) {
            if ((this.GetHierarchy1OperationCompleted == null)) {
                this.GetHierarchy1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHierarchy1OperationCompleted);
            }
            this.InvokeAsync("GetHierarchy1", new object[] {
                        sessionToken,
                        context,
                        mode,
                        module}, this.GetHierarchy1OperationCompleted, userState);
        }
        
        private void OnGetHierarchy1OperationCompleted(object arg) {
            if ((this.GetHierarchy1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHierarchy1Completed(this, new GetHierarchy1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetMatrix", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetMatrix(string guid, string path) {
            object[] results = this.Invoke("GetMatrix", new object[] {
                        guid,
                        path});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMatrixAsync(string guid, string path) {
            this.GetMatrixAsync(guid, path, null);
        }
        
        /// <remarks/>
        public void GetMatrixAsync(string guid, string path, object userState) {
            if ((this.GetMatrixOperationCompleted == null)) {
                this.GetMatrixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatrixOperationCompleted);
            }
            this.InvokeAsync("GetMatrix", new object[] {
                        guid,
                        path}, this.GetMatrixOperationCompleted, userState);
        }
        
        private void OnGetMatrixOperationCompleted(object arg) {
            if ((this.GetMatrixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatrixCompleted(this, new GetMatrixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetEmptyDataRecord", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetEmptyDataRecord(string guid, string module, string reportingPointPath, string view) {
            object[] results = this.Invoke("GetEmptyDataRecord", new object[] {
                        guid,
                        module,
                        reportingPointPath,
                        view});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmptyDataRecordAsync(string guid, string module, string reportingPointPath, string view) {
            this.GetEmptyDataRecordAsync(guid, module, reportingPointPath, view, null);
        }
        
        /// <remarks/>
        public void GetEmptyDataRecordAsync(string guid, string module, string reportingPointPath, string view, object userState) {
            if ((this.GetEmptyDataRecordOperationCompleted == null)) {
                this.GetEmptyDataRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmptyDataRecordOperationCompleted);
            }
            this.InvokeAsync("GetEmptyDataRecord", new object[] {
                        guid,
                        module,
                        reportingPointPath,
                        view}, this.GetEmptyDataRecordOperationCompleted, userState);
        }
        
        private void OnGetEmptyDataRecordOperationCompleted(object arg) {
            if ((this.GetEmptyDataRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmptyDataRecordCompleted(this, new GetEmptyDataRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetVariables", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetVariables(string guid, string variablesXml) {
            object[] results = this.Invoke("GetVariables", new object[] {
                        guid,
                        variablesXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVariablesAsync(string guid, string variablesXml) {
            this.GetVariablesAsync(guid, variablesXml, null);
        }
        
        /// <remarks/>
        public void GetVariablesAsync(string guid, string variablesXml, object userState) {
            if ((this.GetVariablesOperationCompleted == null)) {
                this.GetVariablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVariablesOperationCompleted);
            }
            this.InvokeAsync("GetVariables", new object[] {
                        guid,
                        variablesXml}, this.GetVariablesOperationCompleted, userState);
        }
        
        private void OnGetVariablesOperationCompleted(object arg) {
            if ((this.GetVariablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVariablesCompleted(this, new GetVariablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#GetViews", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetViews(string guid, string path) {
            object[] results = this.Invoke("GetViews", new object[] {
                        guid,
                        path});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewsAsync(string guid, string path) {
            this.GetViewsAsync(guid, path, null);
        }
        
        /// <remarks/>
        public void GetViewsAsync(string guid, string path, object userState) {
            if ((this.GetViewsOperationCompleted == null)) {
                this.GetViewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewsOperationCompleted);
            }
            this.InvokeAsync("GetViews", new object[] {
                        guid,
                        path}, this.GetViewsOperationCompleted, userState);
        }
        
        private void OnGetViewsOperationCompleted(object arg) {
            if ((this.GetViewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewsCompleted(this, new GetViewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#Login", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Login() {
            object[] results = this.Invoke("Login", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync() {
            this.LoginAsync(null);
        }
        
        /// <remarks/>
        public void LoginAsync(object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[0], this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Login1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#Login", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Login(string username, string password) {
            object[] results = this.Invoke("Login1", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Login1Async(string username, string password) {
            this.Login1Async(username, password, null);
        }
        
        /// <remarks/>
        public void Login1Async(string username, string password, object userState) {
            if ((this.Login1OperationCompleted == null)) {
                this.Login1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogin1OperationCompleted);
            }
            this.InvokeAsync("Login1", new object[] {
                        username,
                        password}, this.Login1OperationCompleted, userState);
        }
        
        private void OnLogin1OperationCompleted(object arg) {
            if ((this.Login1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Login1Completed(this, new Login1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#Logout", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        public void Logout(string sessionToken) {
            this.Invoke("Logout", new object[] {
                        sessionToken});
        }
        
        /// <remarks/>
        public void LogoutAsync(string sessionToken) {
            this.LogoutAsync(sessionToken, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(string sessionToken, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        sessionToken}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#CheckPassword", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool CheckPassword(string guid, string password) {
            object[] results = this.Invoke("CheckPassword", new object[] {
                        guid,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPasswordAsync(string guid, string password) {
            this.CheckPasswordAsync(guid, password, null);
        }
        
        /// <remarks/>
        public void CheckPasswordAsync(string guid, string password, object userState) {
            if ((this.CheckPasswordOperationCompleted == null)) {
                this.CheckPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPasswordOperationCompleted);
            }
            this.InvokeAsync("CheckPassword", new object[] {
                        guid,
                        password}, this.CheckPasswordOperationCompleted, userState);
        }
        
        private void OnCheckPasswordOperationCompleted(object arg) {
            if ((this.CheckPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPasswordCompleted(this, new CheckPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#RenewLease", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        public void RenewLease(string guid) {
            this.Invoke("RenewLease", new object[] {
                        guid});
        }
        
        /// <remarks/>
        public void RenewLeaseAsync(string guid) {
            this.RenewLeaseAsync(guid, null);
        }
        
        /// <remarks/>
        public void RenewLeaseAsync(string guid, object userState) {
            if ((this.RenewLeaseOperationCompleted == null)) {
                this.RenewLeaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenewLeaseOperationCompleted);
            }
            this.InvokeAsync("RenewLease", new object[] {
                        guid}, this.RenewLeaseOperationCompleted, userState);
        }
        
        private void OnRenewLeaseOperationCompleted(object arg) {
            if ((this.RenewLeaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenewLeaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#SubmitCalendar", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        public void SubmitCalendar(string guid, string calendarXml) {
            this.Invoke("SubmitCalendar", new object[] {
                        guid,
                        calendarXml});
        }
        
        /// <remarks/>
        public void SubmitCalendarAsync(string guid, string calendarXml) {
            this.SubmitCalendarAsync(guid, calendarXml, null);
        }
        
        /// <remarks/>
        public void SubmitCalendarAsync(string guid, string calendarXml, object userState) {
            if ((this.SubmitCalendarOperationCompleted == null)) {
                this.SubmitCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitCalendarOperationCompleted);
            }
            this.InvokeAsync("SubmitCalendar", new object[] {
                        guid,
                        calendarXml}, this.SubmitCalendarOperationCompleted, userState);
        }
        
        private void OnSubmitCalendarOperationCompleted(object arg) {
            if ((this.SubmitCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitCalendarCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#SubmitDataRecord", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string SubmitDataRecord(string guid, string filterXml, string dataXml) {
            object[] results = this.Invoke("SubmitDataRecord", new object[] {
                        guid,
                        filterXml,
                        dataXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitDataRecordAsync(string guid, string filterXml, string dataXml) {
            this.SubmitDataRecordAsync(guid, filterXml, dataXml, null);
        }
        
        /// <remarks/>
        public void SubmitDataRecordAsync(string guid, string filterXml, string dataXml, object userState) {
            if ((this.SubmitDataRecordOperationCompleted == null)) {
                this.SubmitDataRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitDataRecordOperationCompleted);
            }
            this.InvokeAsync("SubmitDataRecord", new object[] {
                        guid,
                        filterXml,
                        dataXml}, this.SubmitDataRecordOperationCompleted, userState);
        }
        
        private void OnSubmitDataRecordOperationCompleted(object arg) {
            if ((this.SubmitDataRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitDataRecordCompleted(this, new SubmitDataRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#SubmitNewDataRecord", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string SubmitNewDataRecord(string guid, string reportingPointPath, string nameValueCollectionXml) {
            object[] results = this.Invoke("SubmitNewDataRecord", new object[] {
                        guid,
                        reportingPointPath,
                        nameValueCollectionXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitNewDataRecordAsync(string guid, string reportingPointPath, string nameValueCollectionXml) {
            this.SubmitNewDataRecordAsync(guid, reportingPointPath, nameValueCollectionXml, null);
        }
        
        /// <remarks/>
        public void SubmitNewDataRecordAsync(string guid, string reportingPointPath, string nameValueCollectionXml, object userState) {
            if ((this.SubmitNewDataRecordOperationCompleted == null)) {
                this.SubmitNewDataRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitNewDataRecordOperationCompleted);
            }
            this.InvokeAsync("SubmitNewDataRecord", new object[] {
                        guid,
                        reportingPointPath,
                        nameValueCollectionXml}, this.SubmitNewDataRecordOperationCompleted, userState);
        }
        
        private void OnSubmitNewDataRecordOperationCompleted(object arg) {
            if ((this.SubmitNewDataRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitNewDataRecordCompleted(this, new SubmitNewDataRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#UpdateVariables", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string UpdateVariables(string guid, string variablesXml) {
            object[] results = this.Invoke("UpdateVariables", new object[] {
                        guid,
                        variablesXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateVariablesAsync(string guid, string variablesXml) {
            this.UpdateVariablesAsync(guid, variablesXml, null);
        }
        
        /// <remarks/>
        public void UpdateVariablesAsync(string guid, string variablesXml, object userState) {
            if ((this.UpdateVariablesOperationCompleted == null)) {
                this.UpdateVariablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVariablesOperationCompleted);
            }
            this.InvokeAsync("UpdateVariables", new object[] {
                        guid,
                        variablesXml}, this.UpdateVariablesOperationCompleted, userState);
        }
        
        private void OnUpdateVariablesOperationCompleted(object arg) {
            if ((this.UpdateVariablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVariablesCompleted(this, new UpdateVariablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UpdateVariables1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#UpdateVariables", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string UpdateVariables(string guid, string variablesXml, bool force) {
            object[] results = this.Invoke("UpdateVariables1", new object[] {
                        guid,
                        variablesXml,
                        force});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateVariables1Async(string guid, string variablesXml, bool force) {
            this.UpdateVariables1Async(guid, variablesXml, force, null);
        }
        
        /// <remarks/>
        public void UpdateVariables1Async(string guid, string variablesXml, bool force, object userState) {
            if ((this.UpdateVariables1OperationCompleted == null)) {
                this.UpdateVariables1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVariables1OperationCompleted);
            }
            this.InvokeAsync("UpdateVariables1", new object[] {
                        guid,
                        variablesXml,
                        force}, this.UpdateVariables1OperationCompleted, userState);
        }
        
        private void OnUpdateVariables1OperationCompleted(object arg) {
            if ((this.UpdateVariables1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVariables1Completed(this, new UpdateVariables1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server#Authenticate", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebService/C" +
            "itect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Authenticate(string username, string password) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string username, string password) {
            this.AuthenticateAsync(username, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string username, string password, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        username,
                        password}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'class' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceCoreBinding", Namespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server/Citect.Ampla" +
        ".General.Server%2C%20Version%3D4.2.4629.0%2C%20Culture%3Dneutral%2C%20PublicKeyT" +
        "oken%3D13aaee2494f61799")]
    public partial class WebServiceCoreBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AboutOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebServiceCoreBinding() {
            this.Url = AmplaSettings.generalLegacyWS_WebServiceService_LOCALHOST;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AboutCompletedEventHandler AboutCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebServiceCo" +
            "re/Citect.Ampla.General.Server#About", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebServiceCo" +
            "re/Citect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebServiceCo" +
            "re/Citect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string About() {
            object[] results = this.Invoke("About", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AboutAsync() {
            this.AboutAsync(null);
        }
        
        /// <remarks/>
        public void AboutAsync(object userState) {
            if ((this.AboutOperationCompleted == null)) {
                this.AboutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAboutOperationCompleted);
            }
            this.InvokeAsync("About", new object[0], this.AboutOperationCompleted, userState);
        }
        
        private void OnAboutOperationCompleted(object arg) {
            if ((this.AboutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AboutCompleted(this, new AboutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'class' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceBaseBinding", Namespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server/Citect.Ampla" +
        ".General.Server%2C%20Version%3D4.2.4629.0%2C%20Culture%3Dneutral%2C%20PublicKeyT" +
        "oken%3D13aaee2494f61799")]
    public partial class WebServiceBaseBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AboutOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebServiceBaseBinding() {
            this.Url = AmplaSettings.generalLegacyWS_WebServiceService_LOCALHOST;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AboutCompletedEventHandler AboutCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebServiceBa" +
            "se/Citect.Ampla.General.Server#About", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebServiceBa" +
            "se/Citect.Ampla.General.Server", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/Citect.Ampla.General.Server.WebServiceBa" +
            "se/Citect.Ampla.General.Server")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string About() {
            object[] results = this.Invoke("About", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AboutAsync() {
            this.AboutAsync(null);
        }
        
        /// <remarks/>
        public void AboutAsync(object userState) {
            if ((this.AboutOperationCompleted == null)) {
                this.AboutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAboutOperationCompleted);
            }
            this.InvokeAsync("About", new object[0], this.AboutOperationCompleted, userState);
        }
        
        private void OnAboutOperationCompleted(object arg) {
            if ((this.AboutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AboutCompleted(this, new AboutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AboutCompletedEventHandler(object sender, AboutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AboutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AboutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AvailableModulesCompletedEventHandler(object sender, AvailableModulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AvailableModulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AvailableModulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAuditLogCompletedEventHandler(object sender, GetAuditLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuditLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuditLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCalendarCompletedEventHandler(object sender, GetCalendarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCauseLocationsCompletedEventHandler(object sender, GetCauseLocationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCauseLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCauseLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetData1CompletedEventHandler(object sender, GetData1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetData1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetData1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetData2CompletedEventHandler(object sender, GetData2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetData2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetData2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDataRecordCompletedEventHandler(object sender, GetDataRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetFieldDescriptorsCompletedEventHandler(object sender, GetFieldDescriptorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldDescriptorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldDescriptorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetFieldDescriptors1CompletedEventHandler(object sender, GetFieldDescriptors1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldDescriptors1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldDescriptors1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetFilterCompletedEventHandler(object sender, GetFilterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetFilterDescriptorsCompletedEventHandler(object sender, GetFilterDescriptorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilterDescriptorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilterDescriptorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetFilterDescriptors1CompletedEventHandler(object sender, GetFilterDescriptors1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilterDescriptors1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilterDescriptors1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHierarchyCompletedEventHandler(object sender, GetHierarchyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHierarchyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHierarchyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHierarchy1CompletedEventHandler(object sender, GetHierarchy1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHierarchy1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHierarchy1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetMatrixCompletedEventHandler(object sender, GetMatrixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatrixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatrixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetEmptyDataRecordCompletedEventHandler(object sender, GetEmptyDataRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmptyDataRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmptyDataRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetVariablesCompletedEventHandler(object sender, GetVariablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVariablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVariablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetViewsCompletedEventHandler(object sender, GetViewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void Login1CompletedEventHandler(object sender, Login1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Login1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Login1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CheckPasswordCompletedEventHandler(object sender, CheckPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RenewLeaseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SubmitCalendarCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SubmitDataRecordCompletedEventHandler(object sender, SubmitDataRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitDataRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitDataRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SubmitNewDataRecordCompletedEventHandler(object sender, SubmitNewDataRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitNewDataRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitNewDataRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateVariablesCompletedEventHandler(object sender, UpdateVariablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVariablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateVariablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateVariables1CompletedEventHandler(object sender, UpdateVariables1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVariables1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateVariables1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591